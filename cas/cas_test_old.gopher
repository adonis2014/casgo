package cas

import (
	"net/http/httptest"
	"testing"

	"github.com/PuerkitoBio/goquery"
)

// Utility function for setting up necessary things for http test
func setupHTTPTest(t *testing.T) (*CAS, *httptest.Server) {
	// Setup CAS server and DB
	server := setupTestCASServer(t)
	setupDb(server, t)

	httpTestServer := httptest.NewServer(server.serveMux)
	return server, httpTestServer
}

// Utility test harness for HTTP tests
func httpTestHarness(t *testing.T, endpoint string, testFunc func(*testing.T, *CAS, *httptest.Server, *goquery.Document)) {
	if testing.Short() {
		t.Skip("Skipping integration test (in short mode).")
	}

	// Setup http test server
	server, httpTestServer := setupHTTPTest(t)
	defer httpTestServer.Close()
	defer teardownDb(server, t)

	// Visit specified endpoint
	doc, err := goquery.NewDocument(httpTestServer.URL + endpoint)
	if err != nil {
		t.Error(err)
	}

	// Run the function we were given
	testFunc(t, server, httpTestServer, doc)
}

// Test index page load
func TestHTTPIndexPageLoad(t *testing.T) {
	httpTestHarness(t, "", func(t *testing.T, _ *CAS, httpTestServer *httptest.Server, doc *goquery.Document) {
		// Ensure title of index page (endpoint "") contains what we expect
		expectedText, actualText := "CasGo", doc.Find("title").Text()
		if expectedText != actualText {
			t.Errorf("Actual title text [%s] != expected title text [%s]", actualText, expectedText)
		}
	})
}

// Test login page display (check for some expected elements)
func TestHTTPLoginPageLoad(t *testing.T) {
	httpTestHarness(t, "/login", func(t *testing.T, server *CAS, httpTestServer *httptest.Server, doc *goquery.Document) {
		// Ensure actual title text of login page (endpoint "/login") matches what is expected
		expectedText := server.Config["companyName"] + " CasGo Login"
		actualText := doc.Find("title").Text()
		if expectedText != actualText {
			t.Errorf("Actual title text [%s] != expected title text [%s]", actualText, expectedText)
		}

	})
}

// Test register page load
func TestHTTPRegisterPageLoad(t *testing.T) {
	httpTestHarness(t, "/register", func(t *testing.T, server *CAS, httpTestServer *httptest.Server, doc *goquery.Document) {
		expectedText := server.Config["companyName"] + " CasGo Register"
		actualText := doc.Find("title").Text()
		if expectedText != actualText {
			t.Errorf("Actual title text [%s] != expected title text [%s]", actualText, expectedText)
		}
	})
}
