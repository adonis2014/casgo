package cas

import (
	"testing"
)

// Test adding new user
func TestAddNewUser(t *testing.T) {
	fixturesToLoad := []StringTuple{
		StringTuple{"users", ""},
	}
	dbTestHarness(t, fixturesToLoad, func(t *testing.T, s *CAS) {

		// Add the user
		newUser, casErr := s.dbAdapter.AddNewUser("test_user@test.com", "randompassword")
		if casErr != nil {
			t.Errorf("Failed to add new user, err: %v", casErr)
			return
		}

		// Find the user by email
		returnedUser, casErr := s.dbAdapter.FindUserByEmail(newUser.Email)
		if casErr != nil {
			t.Errorf("Failed to find created temporary user, err: %v", casErr)
			return
		}

		if returnedUser != nil && newUser.Email != returnedUser.Email {
			t.Errorf("Newly created user and returned user's emails don't match")
			return
		}

	})
}

// Utility function for creating a service and adding a ticket to it
func addTicketForService(s *CAS, t *testing.T) (*CASTicket, *CASService, *CASServerError) {

	// Create a new CASTicket to store
	ticket := &CASTicket{
		UserEmail:      "test@test.com",
		UserAttributes: map[string]string{},
		WasSSO:         false,
	}

	mockService := &CASService{
		Url:        "localhost:8080",
		Name:       "mock_service",
		AdminEmail: "noone@nowhere.com",
	}

	ticket, casErr := s.dbAdapter.AddTicketForService(ticket, mockService)
	if casErr != nil {
		t.Logf("Failed to add ticket to database for service [%s]", mockService.Name)
		return nil, nil, casErr
	}

	// Ensure that the ticket has been updated with the right ID
	if ticket != nil && len(ticket.Id) == 0 {
		t.Logf("Received ticket does not have a proper Id attribute set: %v", ticket)
		return nil, nil, &FailedToCreateTicketError
	}

	return ticket, mockService, nil
}

// Test adding ticket for service
func TestAddTicketForService(t *testing.T) {
	fixturesToLoad := []StringTuple{
		StringTuple{"tickets", ""},
	}
	dbTestHarness(t, fixturesToLoad, func(t *testing.T, s *CAS) {

		// Add ticket for the service
		addTicketForService(s, t)

	})
}

// Test finding tickets by Id given a service
func TestFindTicketByIdForService(t *testing.T) {
	fixturesToLoad := []StringTuple{
		StringTuple{"tickets", ""},
	}
	dbTestHarness(t, fixturesToLoad, func(t *testing.T, s *CAS) {

		// Add ticket for the service
		originalTicket, service, casErr := addTicketForService(s, t)
		if casErr != nil {
			if casErr.err != nil {
				t.Logf("DB err: %v", *casErr.err)
			}
			t.Errorf("Utility function to add ticket for service failed, err: %v", casErr)
			return
		}

		// Find the ticket that was just added
		ticket, err := s.dbAdapter.FindTicketByIdForService(originalTicket.Id, service)
		if err != nil {
			t.Errorf("Failed to find ticket that should have been added: %v", originalTicket)
			return
		}

		// Ensure the tickets are the same
		if ticket != nil && originalTicket != nil && !compareTickets(*ticket, *originalTicket) {
			t.Errorf("Found ticket ( %v ) != original ticket ( %v )", ticket, originalTicket)
			return
		}

	})
}

// Test removing an added tickets for a given user
func TestRemoveTicketsForUser(t *testing.T) {
	fixturesToLoad := []StringTuple{
		StringTuple{"tickets", ""},
		StringTuple{"users", ""},
	}
	dbTestHarness(t, fixturesToLoad, func(t *testing.T, s *CAS) {

		// Add a ticket for the user
		ticket, service, casErr := addTicketForService(s, t)
		if casErr != nil {
			if casErr.err != nil {
				t.Logf("DB err: %v", *casErr.err)
			}
			t.Errorf("Utility function to add ticket for service failed, err: %v", casErr)
			return
		}

		// Remove ticket for the user
		err := s.dbAdapter.RemoveTicketsForUserWithService(ticket.UserEmail, service)
		if err != nil {
			t.Errorf("Failed to remove tickets for user with service, err: %v", casErr)
			return
		}

		// Attempt to find ticket (that should have been removed
		ticket, err = s.dbAdapter.FindTicketByIdForService(ticket.Id, service)
		if ticket != nil || err == nil {
			t.Errorf("Found ticket (or did not recieve expected error) that should have been deleted: %v", ticket)
			return
		}

	})
}
